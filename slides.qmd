---
title: "Command Line Seminar"
format: revealjs
smaller: true
scrollable: true
execute:
  echo: true
output-location: fragment
---

## Introductions

. . .

-   Who am I?

. . .

-   What is DaSL?

. . .

-   Who are you?

    -   Name, pronouns, group you work in

    -   What you want to get out of the seminar

    -   Favorite fall activity

## Goals of the seminar

. . .

-   Understand the purpose of a Command Line Interface vs. Graphical User Interface

. . .

-   Treat text-based programs as functions

. . .

-   Be able to navigate a directory tree 

. . .

-   Be able to create, delete, copy, and move files 

. . .

-   Use a text editor in the command line

## Ways we can interact with a computer: 

. . .

-   Graphical User Interface (GUI): interaction between a pointer with windows and menus

. . .

-   Command Line Interface (CLI): text-based interaction

. . .

When is one more effective than the other?

::: notes
Let's think about the ways we can interact with a computer: keyboard and mouse, hand gestures on a smartphone, voice commands, AR/VR, etc. Most of these interactions are related to a Graphical User Interface (GUI), which centers on the interaction between a pointer and colorful windows and menus.

However, the way a computer interprets and executes instructions are based on text commands. Even graphical information, such as where the mouse is when it clicked a button, is converted into numbers and characters. That means to be an effective programmer and data scientist, we also need to learn how to interact with our computers in a text-based way. This text-based interaction is called the Command Line Interface (CLI).
:::

## Common command line usage examples

. . .

-   Scalable manipulation of text, files, and folders

. . .


-   Use of programming languages and scientific software tools

. . .

-   Use to high performance computing systems and the cloud 

::: notes
-   Scalable manipulation of text, files, and folders: if we want to move all files that have the words "tax returns" to a new folder, it would probably not scale easily via a mouse, but it could be done in one command in the Command Line.

-   Use of programming languages and scientific software tools often require Command Line knowledge: running Python and R programs, using Git, alignment and variant calling bioinformatics software. Although there are nice graphical user interfaces such as RStudio, Juypter Notebooks, and Galaxy, to have full flexibility of these languages you need to control them from the Command Line.

-   Use to high performance computing systems and the cloud all require Command Line knowledge as they do not typically offer GUIs.
:::

## Getting started

### Installing Shell for Windows users

-   Open Windows Powershell.

-   Type in: `wsl --install -d ubuntu`, and hit enter.

-   You will might be asked to enter a new username and password. You can use the same as you have for your computer.

-   A shell terminal should show up. If it doesn't show up, look in your search bar for Ubuntu on Windows, and open it.

### For all users

-   For Macs, open up "Terminal" Application. 

-   On Windows, open up "Windows Subsystem for Unix", or "Ubuntu on Windows". You should see a single line of text, with a blinking cursor, such as this:

```         
andrew@MGQQR2YQRT9 ~ % 
```

## Interacting with the command line, a perspective

. . .


-   Unlike a GUI, the CLI does not provide immediate options to you to interact with.

. . .

-   Therefore, we need to keep a mental model of a task we want to complete.

. . .

-   It is forgiving, and encourages exploration and experimentation. 

:::notes
Unlike a GUI, the CLI does not provide immediate options to you to interact with. We have to know a learn a handful of vocabulary to interact with it well. But besides the vocabulary, we need to keep a mental model of a task we want to complete. In GUIs that that mental model is shown to us visually, such as a file browser.

We organizes our seminar by constructing several mental models and learning relevant commands related to each model.

Lastly, the CLI is forgiving. It will tell you if you did something you did not intend to, with little consequences, which encourages exploration and experimentation. Consequential actions have security safeguards. With this mindset, we will explore the CLI openly.
:::

## Mental Model 1: Navigating a directory tree

. . .

On our computer, the **directory tree** organizes files and directories in an (upside down) tree-like structure. In each folder, there is a parental directory, and there can be files and directories within it. 

![Source: https://andysbrainbook.readthedocs.io/en/latest/_images/UnixTree1.png](https://andysbrainbook.readthedocs.io/en/latest/_images/UnixTree1.png){width="600"}

Example "home" **directory path**: `/Users/andrew/`

## Basic directory tree navigation

. . .

![Source: https://andysbrainbook.readthedocs.io/en/latest/_images/UnixTree1.png](https://andysbrainbook.readthedocs.io/en/latest/_images/UnixTree1.png){width="400"}

. . .

-   `pwd` prints out our current directory.

. . .

-   `cd /` changes directory to the root directory.

. . .

-   `cd /Users/andrew` changes directory to the home directory.

## Demo

-   The **absolute directory path** specifies the directory from the root directory `/`.

-   The **relative directory path** is a path *relative to our current directory*.

-   `ls` lists all the files in the current directory. 

## Exercise: explore the maze

Download and unzip this file: https://tinyurl.com/daslcmd

Use `cd` and `ls` to get to folder of the file you unzipped. 

. . .

Use `cd` and `ls` to explore the maze in `cmd_exercises/maze`, report back what you find!

To examine a text file completely, use the `cat` command with the first argument be the text file name, such as:

```         
andrew@MGQQR2YQRT9 west % cat orca_J.txt 
Pod J
```

To examine the first few lines of a text file, use the `head` command with the first argument to be the text file name. To examine the last few lines of a text file, use `tail`. To scroll through a text file, use `less`, and press `q` to quit.

## Mental Model 2: Treat text-based commands as functions

. . .

The commands you have been using, `pwd`, `cd`, `ls`, and `cat` are actually computer programs!

. . .

When using a command from the command line, we should treat it as a function: a command has a **name**, inputs in terms of **options** and/or **arguments**, and optionally **returns** something.

. . .

![Source: Wellesley CS 110: https://cs.wellesley.edu/~cs110/lectures/L16/images/function.png](https://cs.wellesley.edu/~cs110/lectures/L16/images/function.png)

## `ls` example

. . .

![Source: Software Carpentry: https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg](https://swcarpentry.github.io/shell-novice/fig/shell_command_syntax.svg)

. . .


```         
andrew@MGQQR2YQRT9 ~ % ls /Users
Shared		andrew		
```

. . .

We add the option `-F`:

```         
andrew@MGQQR2YQRT9 ~ % ls -F /Users
Shared/		andrew/
```

:::notes
This displays a slash ('/') immediately after each pathname that is a directory, and ('\@') after a symbolic link (not important to know right now).

It is sometimes easy to overlook that the text printed from a command like `ls` is indeed the returned output from the program. It is important to keep this in mind when we start to use multiple commands together later in this seminar.

Subcommands
:::

## What are the possible options and arguemnts for a command?

. . .

If the command is built-in (not externally installed), then there is usually a manual for it. Use the `man` command, with argument of the command you want to look up:

```         
man ls
```

Notice that here, `man` is the command, and `ls` is an argument for the command!

. . .

Often, for externally installed software, there is a `--help` or `-h` option that tells you how to use the software.

```         
python3 --help
```

. . .

Online resources: <https://explainshell.com/>


## Exercise: options for `ls`

In the maze, try out a bunch of ways to list files and directories using various options of `ls`. Some questions to explore:

-   Can you sort by last modified?

-   Can you show the long format? What is the long format?

-   What are hidden files? Are there any hidden files in the maze? (This requires some googling. The manual is not clear on this.)

-   How can you use multiple options at once?

-   Can you print out the entire maze directory tree by using a recursive option?

## Putting the two mental models together: file manipulation

. . .

Here are some commands that allows you to create, move, copy, and delete files and folders. All of these commands have no return value.

-   `cp [from] [to]` copies a file or folder from the `[from]` path to a `[to]` folder.

-   `mv [from] [to]` moves a file or folder from the `[from]` path to a `[to]` folder.

-   `mkdir [folderPath]` creates a new folder at the path specified by `[folderPath]`.

-   `rm [path]` deletes a file at `[path]`. `rm -r [folder]` deletes a folder and its subcontents. Cannot be undone!

## Demo

. . .

-   `*` wildcard

. . .

-   `?` wildcard

## Using a text editor in CLI

A commonly used task in CLI is to edit text files. `nano`, `vim`, and `emacs` are the three most popular ones, in increasing learning curve but also complexity in the tasks you can perform. We will start with `nano` today.

## Thanks for coming!

Course survey: https://forms.gle/BnHMjsqWsnhoQEtL8

Stickers: https://forms.gle/REszUXavNtdXGZ2NA

Git/GitHub course registration: https://forms.gle/MzLh5gehgUysVyGM6


